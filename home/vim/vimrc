""" [[ REFERENCES ]] """
" https://github.com/skywind3000/vim-init
" https://github.com/wsdjeg/SpaceVim
" https://github.com/wklken/k-vim
" https://github.com/amix/vimrc
" https://github.com/chenxuan520/vim-fast
" https://github.com/liuchengxu/space-vim
" https://github.com/theopn/kickstart.vim

""" [[ OPTIONS ]] """
set autoread
set backspace=indent,eol,start
set number
set relativenumber

""" [[ KEYBINDINGS ]] """
let mapleader = ' '
let maplocalleader = ','
inoremap jk <Esc>

""" [[ AUTOCMD ]] """
augroup restore_position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line('$') | execute "normal! g'\"" | endif
augroup end

""" [[ PLUGINS ]] """
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))| PlugInstall --sync | source $MYVIMRC | endif

call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot', { 'on': [] }
augroup syntax_polyglot
  autocmd!
  autocmd InsertEnter * call plug#load('vim-polyglot')
        \| autocmd! syntax_polyglot
augroup END

Plug 'ryanoasis/vim-devicons', { 'on': [] }
augroup ui_devicons
  autocmd!
  autocmd BufReadPost * call plug#load('vim-devicons')
        \| autocmd! ui_devicons
augroup END

Plug 'morhetz/gruvbox', { 'on': [] }
augroup ui_gruvbox
  autocmd!
  autocmd BufReadPost * call plug#load('gruvbox')
        \| autocmd! ui_gruvbox
        \| set background=dark
        \| set termguicolors
        \| set cursorline
        \| set cursorcolumn
        \| set colorcolumn=80
        \| let g:gruvbox_contrast_dark = 'hard'
        \| colorscheme gruvbox
augroup END

Plug 'itchyny/lightline.vim', { 'on': [] }
Plug 'shinchu/lightline-gruvbox.vim', { 'on': [] }
augroup ui_lightline
  autocmd!
  autocmd BufReadPost * call plug#load('lightline.vim', 'lightline-gruvbox.vim')
        \| autocmd! ui_lightline
        \| set laststatus=2
        \| let g:lightline = {}
        \| let g:lightline.colorscheme = 'gruvbox'
augroup END

Plug 'ap/vim-buftabline', { 'on': [] }
augroup ui_buftabline
  autocmd!
  autocmd BufReadPost * call plug#load('vim-buftabline')
        \| autocmd! ui_buftabline
augroup END

Plug 'itchyny/vim-cursorword', { 'on': [] }
augroup ui_cursorword
  autocmd!
  autocmd BufReadPost * call plug#load('vim-cursorword')
        \| autocmd! ui_cursorword
        \| let g:cursorword_delay = 200
        \| highlight default CursorWord ctermbg=237 ctermfg=223
augroup END

Plug 'ntpeters/vim-better-whitespace', { 'on': [] }
augroup ui_better_whitespace
  autocmd!
  autocmd BufReadPost * call plug#load('vim-better-whitespace')
        \| autocmd! ui_better_whitespace
augroup END

Plug 'Yggdroot/indentLine', { 'on': [] }
augroup ui_indentline
  autocmd!
  autocmd BufReadPost * call plug#load('indentLine')
        \| autocmd! ui_indentline
        \| let g:indentLine_char_list = ['│']
        \| set expandtab
        \| set tabstop=2
        \| set shiftwidth=2
        \| IndentLinesEnable
augroup END

Plug 'wincent/terminus', { 'on': [] }
augroup ui_terminus
  autocmd!
  autocmd BufReadPost * call plug#load('terminus')
        \| autocmd! ui_terminus
augroup END

Plug 'tpope/vim-commentary', { 'on': [] }
augroup tool_commentary
  autocmd!
  autocmd BufReadPost * call plug#load('vim-commentary')
        \| autocmd! tool_commentary
augroup END

Plug 'tpope/vim-surround', { 'on': [] }
augroup tool_surround
  autocmd!
  autocmd BufReadPost * call plug#load('vim-surround')
        \| autocmd! tool_surround
augroup END

Plug 'andymass/vim-matchup', { 'on': [] }
augroup tool_matchup
  autocmd!
  autocmd BufReadPost * call plug#load('vim-matchup')
        \| autocmd! tool_matchup
augroup END

Plug 'airblade/vim-gitgutter', { 'on': [] }
augroup tool_gitgutter
  autocmd!
  autocmd BufReadPost * call plug#load('vim-gitgutter')
        \| autocmd! tool_gitgutter
augroup END

Plug 'machakann/vim-highlightedyank', { 'on': [] }
augroup tool_highlightedyank
  autocmd!
  autocmd BufReadPost * call plug#load('vim-highlightedyank')
        \| autocmd! tool_highlightedyank
        \| let g:highlightedyank_highlight_duration = 1500
augroup END

Plug 'ap/vim-css-color', { 'on': [] }
augroup tool_css_color
  autocmd!
  autocmd BufReadPre * call plug#load('vim-css-color')
        \| autocmd! tool_css_color
augroup END

Plug 'kana/vim-textobj-user', { 'on': [] }
Plug 'kana/vim-textobj-indent', { 'on': [] }
Plug 'kana/vim-textobj-function', { 'on': [] }
Plug 'glts/vim-textobj-comment', { 'on': [] }
Plug 'wellle/targets.vim', { 'on': [] }
augroup tool_text_object
  autocmd!
  autocmd BufReadPost * call plug#load('vim-textobj-user', 'vim-textobj-indent', 'vim-textobj-function', 'vim-textobj-comment', 'targets.vim')
        \| autocmd! tool_text_object
augroup END

Plug 'terryma/vim-smooth-scroll', { 'on': [] }
augroup tool_smooth_scroll
  autocmd!
  autocmd BufReadPost * call plug#load('vim-smooth-scroll')
        \| autocmd! tool_smooth_scroll
        \| noremap <silent> <C-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
        \| noremap <silent> <C-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
        \| noremap <silent> <C-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
        \| noremap <silent> <C-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
augroup END

Plug 'LunarWatcher/auto-pairs', { 'on': [] }
augroup tool_auto_pairs
  autocmd!
  autocmd InsertEnter * call plug#load('auto-pairs')
        \| autocmd! tool_auto_pairs
        \| call autopairs#AutoPairsTryInit()
augroup END

Plug 'luochen1990/rainbow', { 'on': [] }
augroup tool_rainbow
  autocmd!
  autocmd InsertEnter * call plug#load('rainbow')
        \| autocmd! tool_rainbow
        \| call rainbow_main#toggle()
augroup END

Plug 'dense-analysis/ale', { 'on': [] }
augroup linting_ale
  autocmd!
  autocmd BufReadPost * call plug#load('ale')
        \| autocmd! linting_ale
        \| let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
        \| let g:ale_lint_on_text_changed = 'never'
        \| let g:ale_lint_on_insert_leave = 0
augroup END

Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
set timeoutlen=500
let g:mapleader = "\<Space>"
let g:maplocalleader = ','
let g:which_key_fallback_to_native_key = 1
nnoremap <silent> <Leader> :<C-u>WhichKey '<Space>'<CR>
nnoremap <silent> <Localleader> :<C-u>WhichKey ','<CR>

Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle'] }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle'] }
let g:NERDTreeWinSize = 25
let g:NERDTreeShowHidden = 1
nnoremap <Leader>tn :NERDTreeToggle<CR>

Plug 'mbbill/undotree', { 'on': ['UndotreeToggle'] }
nnoremap <Leader>tu :UndotreeToggle<CR>

Plug 'thinca/vim-quickrun', { 'on': ['QuickRun'] }
nnoremap <Leader>tr :QuickRun<CR>

Plug 'mtth/scratch.vim', { 'on': ['Scratch'] }
let g:scratch_horizontal = 1
let g:scratch_top = 0
let g:scratch_height = 15
let g:scratch_no_mappings = 1
nnoremap <Leader>ts :Scratch<CR>

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim', { 'on': ['Files', 'Buffers', 'Colors', 'Lines', 'BLines', 'History', 'Commands', 'Rg'] }
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fF :Files ~/<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fw :Rg<CR>
nnoremap <Leader>fs :BLines<CR>
nnoremap <Leader>fr :History<CR>
nnoremap <Leader>fc :Colors<CR>
nnoremap <Leader><Leader> :Commands<CR>

Plug 'terryma/vim-expand-region', { 'on': ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)'] }
map <C-=> <Plug>(expand_region_expand)
map <C-_> <Plug>(expand_region_shrink)

Plug 'easymotion/vim-easymotion', { 'on': ['<Plug>(easymotion-overwin-line)', '<Plug>(easymotion-overwin-w)'] }
let g:EasyMotion_do_mapping = 0
nmap <Leader>gl <Plug>(easymotion-overwin-line)
nmap <Leader>gw <Plug>(easymotion-overwin-w)

Plug 't9md/vim-choosewin', { 'on': ['<Plug>(choosewin)'] }
let g:choosewin_overlay_enable = 1
nmap <C-x>o <Plug>(choosewin)

Plug 'dyng/ctrlsf.vim', { 'on': ['<Plug>CtrlSFPrompt'] }
nmap <C-c>s <Plug>CtrlSFPrompt

Plug 'prabirshrestha/asyncomplete.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-buffer.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-file.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-lsp.vim', { 'on': [] }
Plug 'prabirshrestha/vim-lsp', { 'on': [] }
Plug 'mattn/vim-lsp-settings', { 'on': ['LspInstallServer', 'LspManageServers'] }
Plug 'hrsh7th/vim-vsnip', { 'on': [] }
Plug 'hrsh7th/vim-vsnip-integ', { 'on': [] }
augroup completion_asyncomplete
  autocmd!
  autocmd InsertEnter * call plug#load('asyncomplete.vim', 'asyncomplete-buffer.vim',
        \ 'asyncomplete-file.vim', 'asyncomplete-lsp.vim', 'vim-lsp', 'vim-vsnip',
        \ 'vim-vsnip-integ')
        \| autocmd! completion_asyncomplete
        \| let g:lsp_diagnostics_enabled = 0
        \| call asyncomplete#enable_for_buffer()
        \| imap <expr><Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : pumvisible() ? "\<C-n>" : "\<Tab>"
        \| smap <expr><Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : pumvisible() ? "\<C-n>" : "\<Tab>"
        \| imap <expr><S-Tab> vsnip#available(1) ? '<Plug>(vsnip-jump-prev)' : pumvisible() ? "\<C-p>" : "\<S-Tab>"
        \| smap <expr><S-Tab> vsnip#available(1) ? '<Plug>(vsnip-jump-prev)' : pumvisible() ? "\<C-p>" : "\<S-Tab>"
        \| call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
        \ 'name': 'buffer',
        \ 'allowlist': ['*'],
        \ 'blocklist': ['go'],
        \ 'completor': function('asyncomplete#sources#buffer#completor'),
        \ 'config': { 'max_buffer_size': 100000 }
        \ }))
        \| call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
        \ 'name': 'file',
        \ 'allowlist': ['*'],
        \ 'priority': 10,
        \ 'completor': function('asyncomplete#sources#file#completor')
        \ }))
        \| call lsp#enable()
        \| if executable('clangd')
        \| call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': { server_info -> ['clangd', '-j=12', '--enable-config', '--background-index', '--clang-tidy', '--all-scopes-completion', '--completion-style=detailed', '--header-insertion-decorators', '--limit-references=3000', '--limit-results=350'] },
        \ 'whitelist': ['c', 'cpp']
        \ })
        \| endif
        \| if executable('basedpyright')
        \| call lsp#register_server({
        \ 'name': 'basedpyright',
        \ 'cmd': { server_info -> ['basedpyright-langserver', '--stdio'] },
        \ 'whitelist': ['python']
        \ })
        \| endif
        \| if executable('typescript-language-server')
        \| call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': { server_info -> [&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri': { server_info -> lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..')) },
        \ 'whitelist': ['javascript', 'javascript.jsx', 'javascriptreact', 'typescript', 'typescript.tsx', 'typescriptreact']
        \ })
        \| endif
augroup END
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc')
    setlocal tagfunc=lsp#tagfunc
  endif
  nmap <buffer>gd <Plug>(lsp-definition)
  nmap <buffer>gs <Plug>(lsp-document-symbol-search)
  nmap <buffer>gS <Plug>(lsp-workspace-symbol-search)
  nmap <buffer>gr <Plug>(lsp-references)
  nmap <buffer>gi <Plug>(lsp-implementation)
  nmap <buffer>gt <Plug>(lsp-type-definition)
  nmap <buffer><leader>rn <Plug>(lsp-rename)
  nmap <buffer>[g <Plug>(lsp-previous-diagnostic)
  nmap <buffer>]g <Plug>(lsp-next-diagnostic)
  nmap <buffer>K <Plug>(lsp-hover)
  nnoremap <buffer><expr><C-f> lsp#scroll(+4)
  nnoremap <buffer><expr><C-d> lsp#scroll(-4)
  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }
Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'dstein64/vim-startuptime', { 'on': ['StartupTime'] }
Plug 'tpope/vim-fugitive', { 'on': ['G', 'Git'] }
Plug 'sbdchd/neoformat', { 'on': ['Neoformat'] }

call plug#end()
